name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            executable: PicoCalc-SD-Formatter.exe
          - os: macos-latest
            executable: PicoCalc-SD-Formatter.app
          - os: ubuntu-latest
            executable: PicoCalc-SD-Formatter
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create dist directory
      run: |
        mkdir -p dist

    - name: Debug environment
      shell: bash
      run: |
        echo "OS: ${{ matrix.os }}"
        echo "Expected executable: ${{ matrix.executable }}"
        echo "Python version:"
        python --version
        echo "PyInstaller version:"
        pip show pyinstaller
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la

    - name: Run build script
      run: |
        python build.py

    - name: Debug build output
      shell: bash
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
        echo "Contents of build directory (if exists):"
        if [ -d "build" ]; then
          ls -la build/
        else
          echo "build directory does not exist"
        fi
        echo "Contents of release directory (if exists):"
        if [ -d "release" ]; then
          ls -la release/
        else
          echo "release directory does not exist"
        fi
        echo "Contents of current directory:"
        ls -la

    - name: Verify build output
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          if [ -f "dist/${{ matrix.executable }}" ]; then
            echo "Windows executable found at dist/${{ matrix.executable }}"
          else
            echo "Windows executable not found at dist/${{ matrix.executable }}"
            echo "Searching for executable in dist directory:"
            find dist -type f -name "*.exe" || echo "No .exe files found"
            exit 1
          fi
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          if [ -d "dist/${{ matrix.executable }}" ]; then
            echo "macOS app bundle found at dist/${{ matrix.executable }}"
          else
            echo "macOS app bundle not found at dist/${{ matrix.executable }}"
            echo "Searching for app bundle in dist directory:"
            find dist -type d -name "*.app" || echo "No .app bundles found"
            exit 1
          fi
        else
          if [ -f "dist/${{ matrix.executable }}" ]; then
            echo "Linux executable found at dist/${{ matrix.executable }}"
          else
            echo "Linux executable not found at dist/${{ matrix.executable }}"
            echo "Searching for executable in dist directory:"
            find dist -type f -executable || echo "No executable files found"
            exit 1
          fi
        fi

    - name: Upload executable files
      uses: actions/upload-artifact@v4
      with:
        name: executables-${{ matrix.os }}
        path: dist/
        if-no-files-found: warn
        retention-days: 5

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true

    - name: Display structure of downloaded files
      shell: bash
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
        echo "All files in dist directory (recursive):"
        find dist -type f | sort
        echo "All directories in dist directory:"
        find dist -type d | sort

    - name: Get release notes
      id: get_release_notes
      run: |
        # Get the tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate release notes
        if [ -n "$PREVIOUS_TAG" ]; then
          RELEASE_NOTES=$(git log --pretty=format:"* %s" $PREVIOUS_TAG..$TAG_NAME)
        else
          RELEASE_NOTES=$(git log --pretty=format:"* %s" $TAG_NAME)
        fi
        
        {
          echo "notes<<EOF"
          echo "## Changes in $TAG_NAME"
          echo ""
          echo "$RELEASE_NOTES"
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/**/*
        name: Release ${{ github.ref_name }}
        body: ${{ steps.get_release_notes.outputs.notes }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
