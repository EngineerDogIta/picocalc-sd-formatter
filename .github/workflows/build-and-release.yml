name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            executable: PicoCalc-SD-Formatter.exe
            asset_name: PicoCalc-SD-Formatter-Windows.exe
          - os: macos-latest
            executable: PicoCalc-SD-Formatter.app
            asset_name: PicoCalc-SD-Formatter-macOS.zip
          - os: ubuntu-latest
            executable: PicoCalc-SD-Formatter
            asset_name: PicoCalc-SD-Formatter-Linux
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create dist directory
      run: |
        mkdir -p dist

    - name: Debug environment
      shell: bash
      run: |
        echo "OS: ${{ matrix.os }}"
        echo "Expected executable: ${{ matrix.executable }}"
        echo "Python version:"
        python --version
        echo "PyInstaller version:"
        pip show pyinstaller
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la

    - name: Run build script
      run: |
        python build.py

    - name: Package macOS App
      if: matrix.os == 'macos-latest'
      run: |
        cd dist
        zip -r PicoCalc-SD-Formatter-macOS.zip PicoCalc-SD-Formatter.app
        cd ..

    - name: Debug build output
      shell: bash
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
        echo "Contents of build directory (if exists):"
        if [ -d "build" ]; then
          ls -la build/
        else
          echo "build directory does not exist"
        fi
        echo "Contents of current directory:"
        ls -la

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          ${{ matrix.os == 'macos-latest' && 'dist/PicoCalc-SD-Formatter-macOS.zip' || format('dist/{0}', matrix.executable) }}
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: false

    - name: Display structure of downloaded files
      shell: bash
      run: |
        echo "Contents of artifacts directory:"
        ls -la artifacts/
        echo "All files in artifacts directory (recursive):"
        find artifacts -type f | sort

    - name: Get release notes
      id: get_release_notes
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          RELEASE_NOTES=$(git log --pretty=format:"* %s" $PREVIOUS_TAG..$TAG_NAME)
        else
          RELEASE_NOTES=$(git log --pretty=format:"* %s" $TAG_NAME)
        fi
        
        echo "notes=$(echo "$RELEASE_NOTES" | jq -Rsa .)" >> "$GITHUB_OUTPUT"

    - name: Create Release
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "${{ github.ref_name }}" \
          --title "Release ${{ github.ref_name }}" \
          --notes "${{ fromJson(steps.get_release_notes.outputs.notes) }}" \
          --draft=false \
          --prerelease=false \
          artifacts/**/*

    - name: Verify Release
      run: |
        echo "Release created successfully"
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
